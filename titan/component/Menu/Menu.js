"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Menu;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _events = _interopRequireDefault(require("../../util/events"));

var _util = require("../../util");

var _MenuModule = _interopRequireDefault(require("./Menu.module.scss"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _this5 = void 0;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

const POSITION = {
  AUTO: 'auto',
  STATIC: 'static',
  TOP_LEFT: 'topLeft',
  TOP_RIGHT: 'topRight',
  BOTTOM_LEFT: 'bottomLeft',
  BOTTOM_RIGHT: 'bottomRight'
};

function Menu(props) {
  var _this = this;

  const {
    className,
    active,
    position,
    outline,
    children,
    selectable,
    selected,
    setActive,
    onSelect,
    onHide,
    onShow
  } = props;
  const [dimension, setDimension] = (0, _react.useState)({
    width: 0,
    height: 0
  });
  const menuNode = (0, _react.useRef)(null);
  const rootRef = (0, _react.useRef)(null);
  const outlineStyle = {
    width: dimension.width,
    height: dimension.height
  };
  const menuClassName = (0, _classnames.default)([_MenuModule.default.menu, _MenuModule.default[position]], {
    [_MenuModule.default.active]: active
  }, className);
  const menuStyle = (0, _react.useMemo)(function () {
    _newArrowCheck(this, _this);

    const {
      width,
      height
    } = dimension;

    if (position !== POSITION.STATIC) {
      if (active) return {
        clip: `rect(0 ${width}px ${height}px 0)`
      };
      if (position === POSITION.TOP_RIGHT) return {
        clip: `rect(0 ${width}px 0 ${width}px)`
      };
      if (position === POSITION.BOTTOM_RIGHT) return {
        clip: `rect(${height}px ${width}px ${height}px ${width}px)`
      };
      if (position === POSITION.BOTTOM_LEFT) return {
        clip: `rect(${height}px 0 ${height}px 0)`
      };
      if (position === POSITION.TOP_LEFT) return {
        clip: 'rect(0 0 0 0)'
      };
    }

    return undefined;
  }.bind(this), [active, dimension, position]);
  const rootStyle = (0, _react.useMemo)(function () {
    _newArrowCheck(this, _this);

    return position !== POSITION.STATIC ? {
      width: dimension.width,
      height: dimension.height
    } : undefined;
  }.bind(this), [dimension.height, dimension.width, position]);
  const handleSelect = (0, _react.useCallback)(function (item, event) {
    _newArrowCheck(this, _this);

    const {
      value,
      onClick
    } = item.props;
    if (onClick) event.persist();
    setActive(false);
    if (onClick) onClick(event);
    if (onSelect) onSelect(value);
  }.bind(this), [onSelect, setActive]);
  const positionTimeoutHandle = (0, _react.useRef)(0);
  (0, _react.useEffect)(function () {
    var _this2 = this;

    _newArrowCheck(this, _this);

    positionTimeoutHandle.current = setTimeout(function () {
      _newArrowCheck(this, _this2);

      const {
        width,
        height
      } = menuNode.current.getBoundingClientRect();
      setDimension({
        width,
        height
      });
    }.bind(this));
  }.bind(this), []);
  const handleDocumentClick = (0, _react.useCallback)(function (event) {
    _newArrowCheck(this, _this);

    if (active && !_events.default.targetIsDescendant(event, rootRef.current)) {
      setActive(false);
    }
  }.bind(this), [active, setActive]);
  const show = (0, _react.useCallback)(function () {
    _newArrowCheck(this, _this);

    const {
      width,
      height
    } = menuNode.current.getBoundingClientRect();
    setDimension({
      width,
      height
    });
    setActive(true);
  }.bind(this), [setActive]);
  const hide = (0, _react.useCallback)(function () {
    _newArrowCheck(this, _this);

    setActive(false);
  }.bind(this), [setActive]);
  const calculatePosition = (0, _react.useMemo)(function () {
    _newArrowCheck(this, _this);

    const parentNode = rootRef.current;
    if (!parentNode) return undefined;
    const {
      top,
      left,
      height,
      width
    } = parentNode.getBoundingClientRect();
    const {
      height: wh,
      width: ww
    } = (0, _util.getViewport)();
    const toTop = top < wh / 2 - height / 2;
    const toLeft = left < ww / 2 - width / 2;
    return `${toTop ? 'top' : 'bottom'}${toLeft ? 'Left' : 'Right'}`;
  }.bind(this), []);
  const activateTimeoutHandle = (0, _react.useRef)(0);
  (0, _react.useEffect)(function () {
    var _this3 = this;

    _newArrowCheck(this, _this);

    if (!active) {
      if (onHide) onHide();

      _events.default.removeEventsFromDocument({
        click: handleDocumentClick,
        touchstart: handleDocumentClick
      });

      hide();
    } else if (active) {
      if (onShow) onShow();

      _events.default.addEventsToDocument({
        click: handleDocumentClick,
        touchstart: handleDocumentClick
      });

      if (position === POSITION.AUTO) {
        if (position !== calculatePosition) {
          setActive(false);
          activateTimeoutHandle.current = setTimeout(function () {
            _newArrowCheck(this, _this3);

            show();
          }.bind(this), 20);
        } else {
          show();
        }
      } else {
        show();
      }
    }

    return function () {
      _newArrowCheck(this, _this3);

      if (active) {
        _events.default.removeEventsFromDocument({
          click: handleDocumentClick,
          touchstart: handleDocumentClick
        });
      }

      clearTimeout(positionTimeoutHandle.current);
      clearTimeout(activateTimeoutHandle.current);
    }.bind(this);
  }.bind(this), [active, calculatePosition, handleDocumentClick, hide, onHide, onShow, position, setActive, show]);
  return _react.default.createElement("div", {
    "data-react-toolbox": "menu",
    className: menuClassName,
    style: rootStyle,
    ref: rootRef
  }, outline ? _react.default.createElement("div", {
    className: _MenuModule.default.outline,
    style: outlineStyle
  }) : null, _react.default.createElement("ul", {
    ref: menuNode,
    className: _MenuModule.default.menuInner,
    style: menuStyle
  }, _react.default.Children.map(children, function (item) {
    var _this4 = this;

    _newArrowCheck(this, _this);

    if (!item) return item;

    if (item.type === _MenuItem.default) {
      return _react.default.cloneElement(item, {
        selected: typeof item.props.value !== 'undefined' && selectable && item.props.value === selected,
        onClick: function onClick(event) {
          _newArrowCheck(this, _this4);

          return handleSelect(item, event);
        }.bind(this)
      });
    }

    return _react.default.cloneElement(item);
  }.bind(this))));
}

Menu.propTypes = {
  active: _propTypes.default.bool,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  onHide: _propTypes.default.func,
  onSelect: _propTypes.default.func,
  onShow: _propTypes.default.func,
  outline: _propTypes.default.bool,
  position: _propTypes.default.oneOf(Object.keys(POSITION).map(function (key) {
    _newArrowCheck(this, _this5);

    return POSITION[key];
  }.bind(void 0))),
  selectable: _propTypes.default.bool,
  selected: _propTypes.default.node,
  setActive: _propTypes.default.func
};
Menu.defaultProps = {
  active: false,
  outline: true,
  position: POSITION.STATIC,
  selectable: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,