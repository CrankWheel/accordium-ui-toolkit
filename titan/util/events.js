"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keys = _interopRequireDefault(require("ramda/src/keys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

var _default = {
  getMousePosition(event) {
    return {
      x: event.pageX - (window.scrollX || window.pageXOffset),
      y: event.pageY - (window.scrollY || window.pageYOffset)
    };
  },

  getTouchPosition(event) {
    return {
      x: event.touches[0].pageX - (window.scrollX || window.pageXOffset),
      y: event.touches[0].pageY - (window.scrollY || window.pageYOffset)
    };
  },

  pauseEvent(event) {
    event.stopPropagation();
    event.preventDefault();
  },

  addEventsToDocument(eventMap) {
    var _this = this;

    Object.keys(eventMap).forEach(function (key) {
      _newArrowCheck(this, _this);

      document.addEventListener(key, eventMap[key], false);
    }.bind(this));
  },

  removeEventsFromDocument(eventMap) {
    var _this2 = this;

    Object.keys(eventMap).forEach(function (key) {
      _newArrowCheck(this, _this2);

      document.removeEventListener(key, eventMap[key], false);
    }.bind(this));
  },

  targetIsDescendant(event, parent) {
    let node = event.target;

    while (node !== null) {
      if (node === parent) return true;
      node = node.parentNode;
    }

    return false;
  },

  addEventListenerOnTransitionEnded(element, fn) {
    const eventName = transitionEventNamesFor(element);
    if (!eventName) return false;
    element.addEventListener(eventName, fn);
    return true;
  },

  removeEventListenerOnTransitionEnded(element, fn) {
    const eventName = transitionEventNamesFor(element);
    if (!eventName) return false;
    element.removeEventListener(eventName, fn);
    return true;
  }

};
exports.default = _default;
const TRANSITIONS = {
  transition: 'transitionend',
  OTransition: 'oTransitionEnd',
  MozTransition: 'transitionend',
  WebkitTransition: 'webkitTransitionEnd'
};

function transitionEventNamesFor(element) {
  var _this3 = this;

  return (0, _keys.default)(TRANSITIONS).reduce(function (result, transition) {
    _newArrowCheck(this, _this3);

    return !result && element && element.style[transition] !== undefined ? TRANSITIONS[transition] : result;
  }.bind(this), null);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aXRhbi91dGlsL2V2ZW50cy5qcyJdLCJuYW1lcyI6WyJnZXRNb3VzZVBvc2l0aW9uIiwiZXZlbnQiLCJ4IiwicGFnZVgiLCJ3aW5kb3ciLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVkiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJnZXRUb3VjaFBvc2l0aW9uIiwidG91Y2hlcyIsInBhdXNlRXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImFkZEV2ZW50c1RvRG9jdW1lbnQiLCJldmVudE1hcCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRzRnJvbURvY3VtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRhcmdldElzRGVzY2VuZGFudCIsInBhcmVudCIsIm5vZGUiLCJ0YXJnZXQiLCJwYXJlbnROb2RlIiwiYWRkRXZlbnRMaXN0ZW5lck9uVHJhbnNpdGlvbkVuZGVkIiwiZWxlbWVudCIsImZuIiwiZXZlbnROYW1lIiwidHJhbnNpdGlvbkV2ZW50TmFtZXNGb3IiLCJyZW1vdmVFdmVudExpc3RlbmVyT25UcmFuc2l0aW9uRW5kZWQiLCJUUkFOU0lUSU9OUyIsInRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwicmVkdWNlIiwicmVzdWx0Iiwic3R5bGUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O2VBRWU7QUFDYkEsRUFBQUEsZ0JBQWdCLENBQUNDLEtBQUQsRUFBUTtBQUN0QixXQUFPO0FBQ0xDLE1BQUFBLENBQUMsRUFBRUQsS0FBSyxDQUFDRSxLQUFOLElBQWVDLE1BQU0sQ0FBQ0MsT0FBUCxJQUFrQkQsTUFBTSxDQUFDRSxXQUF4QyxDQURFO0FBRUxDLE1BQUFBLENBQUMsRUFBRU4sS0FBSyxDQUFD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SyxXQUFMLEVBQWtCSyxNQUFsQixDQUF5QixVQUFDQyxNQUFELEVBQVNMLFVBQVQ7QUFBQTs7QUFBQSxXQUM5QixDQUFDSyxNQUFELElBQVlYLE9BQU8sSUFBSUEsT0FBTyxDQUFDWSxLQUFSLENBQWNOLFVBQWQsTUFBOEJPLFNBQXJELEdBQ0lSLFdBQVcsQ0FBQ0MsVUFBRCxDQURmLEdBRUlLLE1BSDBCO0FBQUEsR0FBekIsYUFJSixJQUpJLENBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBrZXlzIGZyb20gJ3JhbWRhL3NyYy9rZXlzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRNb3VzZVBvc2l0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGV2ZW50LnBhZ2VYIC0gKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5wYWdlWE9mZnNldCksXG4gICAgICB5OiBldmVudC5wYWdlWSAtICh3aW5kb3cuc2Nyb2xsWSB8fCB3aW5kb3cucGFnZVlPZmZzZXQpLFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VG91Y2hQb3NpdGlvbihldmVudCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBldmVudC50b3VjaGVzWzBdLnBhZ2VYIC0gKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5wYWdlWE9mZnNldCksXG4gICAgICB5OiBldmVudC50b3VjaGVzWzBdLnBhZ2VZIC0gKHdpbmRvdy5zY3JvbGxZIHx8IHdpbmRvdy5wYWdlWU9mZnNldCksXG4gICAgfTtcbiAgfSxcblxuICBwYXVzZUV2ZW50KGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBhZGRFdmVudHNUb0RvY3VtZW50KGV2ZW50TWFwKSB7XG4gICAgT2JqZWN0LmtleXMoZXZlbnRNYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihrZXksIGV2ZW50TWFwW2tleV0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmVFdmVudHNGcm9tRG9jdW1lbnQoZXZlbnRNYXApIHtcbiAgICBPYmplY3Qua2V5cyhldmVudE1hcCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgZXZlbnRNYXBba2V5XSwgZmFsc2UpO1xuICAgIH0pO1xuICB9LFxuXG4gIHRhcmdldElzRGVzY2VuZGFudChldmVudCwgcGFyZW50KSB7XG4gICAgbGV0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQpIHJldHVybiB0cnVlO1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGFkZEV2ZW50TGlzdGVuZXJPblRyYW5zaXRpb25FbmRlZChlbGVtZW50LCBmbikge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRyYW5zaXRpb25FdmVudE5hbWVzRm9yKGVsZW1lbnQpO1xuICAgIGlmICghZXZlbnROYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4pO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJPblRyYW5zaXRpb25FbmRlZChlbGVtZW50LCBmbikge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRyYW5zaXRpb25FdmVudE5hbWVzRm9yKGVsZW1lbnQpO1xuICAgIGlmICghZXZlbnROYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4pO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxufTtcblxuY29uc3QgVFJBTlNJVElPTlMgPSB7XG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcbiAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXG4gIE1velRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcbiAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxufTtcblxuZnVuY3Rpb24gdHJhbnNpdGlvbkV2ZW50TmFtZXNGb3IoZWxlbWVudCkge1xuICByZXR1cm4ga2V5cyhUUkFOU0lUSU9OUykucmVkdWNlKChyZXN1bHQsIHRyYW5zaXRpb24pID0+IChcbiAgICAhcmVzdWx0ICYmIChlbGVtZW50ICYmIGVsZW1lbnQuc3R5bGVbdHJhbnNpdGlvbl0gIT09IHVuZGVmaW5lZClcbiAgICAgID8gVFJBTlNJVElPTlNbdHJhbnNpdGlvbl1cbiAgICAgIDogcmVzdWx0XG4gICksIG51bGwpO1xufVxuIl19