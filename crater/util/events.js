"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keys = _interopRequireDefault(require("ramda/src/keys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

var _default = {
  getMousePosition(event) {
    return {
      x: event.pageX - (window.scrollX || window.pageXOffset),
      y: event.pageY - (window.scrollY || window.pageYOffset)
    };
  },

  getTouchPosition(event) {
    return {
      x: event.touches[0].pageX - (window.scrollX || window.pageXOffset),
      y: event.touches[0].pageY - (window.scrollY || window.pageYOffset)
    };
  },

  pauseEvent(event) {
    event.stopPropagation();
    event.preventDefault();
  },

  addEventsToDocument(eventMap) {
    var _this = this;

    Object.keys(eventMap).forEach(function (key) {
      _newArrowCheck(this, _this);

      document.addEventListener(key, eventMap[key], false);
    }.bind(this));
  },

  removeEventsFromDocument(eventMap) {
    var _this2 = this;

    Object.keys(eventMap).forEach(function (key) {
      _newArrowCheck(this, _this2);

      document.removeEventListener(key, eventMap[key], false);
    }.bind(this));
  },

  targetIsDescendant(event, parent) {
    let node = event.target;

    while (node !== null) {
      if (node === parent) return true;
      node = node.parentNode;
    }

    return false;
  },

  addEventListenerOnTransitionEnded(element, fn) {
    const eventName = transitionEventNamesFor(element);
    if (!eventName) return false;
    element.addEventListener(eventName, fn);
    return true;
  },

  removeEventListenerOnTransitionEnded(element, fn) {
    const eventName = transitionEventNamesFor(element);
    if (!eventName) return false;
    element.removeEventListener(eventName, fn);
    return true;
  }

};
exports.default = _default;
const TRANSITIONS = {
  transition: 'transitionend',
  OTransition: 'oTransitionEnd',
  MozTransition: 'transitionend',
  WebkitTransition: 'webkitTransitionEnd'
};

function transitionEventNamesFor(element) {
  var _this3 = this;

  return (0, _keys.default)(TRANSITIONS).reduce(function (result, transition) {
    _newArrowCheck(this, _this3);

    return !result && element && element.style[transition] !== undefined ? TRANSITIONS[transition] : result;
  }.bind(this), null);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jcmF0ZXIvdXRpbC9ldmVudHMuanMiXSwibmFtZXMiOlsiZ2V0TW91c2VQb3NpdGlvbiIsImV2ZW50IiwieCIsInBhZ2VYIiwid2luZG93Iiwic2Nyb2xsWCIsInBhZ2VYT2Zmc2V0IiwieSIsInBhZ2VZIiwic2Nyb2xsWSIsInBhZ2VZT2Zmc2V0IiwiZ2V0VG91Y2hQb3NpdGlvbiIsInRvdWNoZXMiLCJwYXVzZUV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJhZGRFdmVudHNUb0RvY3VtZW50IiwiZXZlbnRNYXAiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50c0Zyb21Eb2N1bWVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0YXJnZXRJc0Rlc2NlbmRhbnQiLCJwYXJlbnQiLCJub2RlIiwidGFyZ2V0IiwicGFyZW50Tm9kZSIsImFkZEV2ZW50TGlzdGVuZXJPblRyYW5zaXRpb25FbmRlZCIsImVsZW1lbnQiLCJmbiIsImV2ZW50TmFtZSIsInRyYW5zaXRpb25FdmVudE5hbWVzRm9yIiwicmVtb3ZlRXZlbnRMaXN0ZW5lck9uVHJhbnNpdGlvbkVuZGVkIiwiVFJBTlNJVElPTlMiLCJ0cmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsInJlZHVjZSIsInJlc3VsdCIsInN0eWxlIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztlQUVlO0FBQ2JBLEVBQUFBLGdCQUFnQixDQUFDQyxLQUFELEVBQVE7QUFDdEIsV0FBTztBQUNMQyxNQUFBQSxDQUFDLEVBQUVELEtBQUssQ0FBQ0UsS0FBTixJQUFlQyxNQUFNLENBQUNDLE9BQVAsSUFBa0JELE1BQU0sQ0FBQ0UsV0FBeEMsQ0FERTtBQUVMQyxNQUFBQSxDQUFDLEVBQUVOLEtBQUssQ0FB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S0ssV0FBTCxFQUFrQkssTUFBbEIsQ0FBeUIsVUFBQ0MsTUFBRCxFQUFTTCxVQUFUO0FBQUE7O0FBQUEsV0FDOUIsQ0FBQ0ssTUFBRCxJQUFZWCxPQUFPLElBQUlBLE9BQU8sQ0FBQ1ksS0FBUixDQUFjTixVQUFkLE1BQThCTyxTQUFyRCxHQUNJUixXQUFXLENBQUNDLFVBQUQsQ0FEZixHQUVJSyxNQUgwQjtBQUFBLEdBQXpCLGFBSUosSUFKSSxDQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQga2V5cyBmcm9tICdyYW1kYS9zcmMva2V5cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0TW91c2VQb3NpdGlvbihldmVudCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBldmVudC5wYWdlWCAtICh3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cucGFnZVhPZmZzZXQpLFxuICAgICAgeTogZXZlbnQucGFnZVkgLSAod2luZG93LnNjcm9sbFkgfHwgd2luZG93LnBhZ2VZT2Zmc2V0KSxcbiAgICB9O1xuICB9LFxuXG4gIGdldFRvdWNoUG9zaXRpb24oZXZlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogZXZlbnQudG91Y2hlc1swXS5wYWdlWCAtICh3aW5kb3cuc2Nyb2xsWCB8fCB3aW5kb3cucGFnZVhPZmZzZXQpLFxuICAgICAgeTogZXZlbnQudG91Y2hlc1swXS5wYWdlWSAtICh3aW5kb3cuc2Nyb2xsWSB8fCB3aW5kb3cucGFnZVlPZmZzZXQpLFxuICAgIH07XG4gIH0sXG5cbiAgcGF1c2VFdmVudChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sXG5cbiAgYWRkRXZlbnRzVG9Eb2N1bWVudChldmVudE1hcCkge1xuICAgIE9iamVjdC5rZXlzKGV2ZW50TWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoa2V5LCBldmVudE1hcFtrZXldLCBmYWxzZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVtb3ZlRXZlbnRzRnJvbURvY3VtZW50KGV2ZW50TWFwKSB7XG4gICAgT2JqZWN0LmtleXMoZXZlbnRNYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIGV2ZW50TWFwW2tleV0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfSxcblxuICB0YXJnZXRJc0Rlc2NlbmRhbnQoZXZlbnQsIHBhcmVudCkge1xuICAgIGxldCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBhZGRFdmVudExpc3RlbmVyT25UcmFuc2l0aW9uRW5kZWQoZWxlbWVudCwgZm4pIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSB0cmFuc2l0aW9uRXZlbnROYW1lc0ZvcihlbGVtZW50KTtcbiAgICBpZiAoIWV2ZW50TmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICByZW1vdmVFdmVudExpc3RlbmVyT25UcmFuc2l0aW9uRW5kZWQoZWxlbWVudCwgZm4pIHtcbiAgICBjb25zdCBldmVudE5hbWUgPSB0cmFuc2l0aW9uRXZlbnROYW1lc0ZvcihlbGVtZW50KTtcbiAgICBpZiAoIWV2ZW50TmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbn07XG5cbmNvbnN0IFRSQU5TSVRJT05TID0ge1xuICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxuICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbn07XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FdmVudE5hbWVzRm9yKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGtleXMoVFJBTlNJVElPTlMpLnJlZHVjZSgocmVzdWx0LCB0cmFuc2l0aW9uKSA9PiAoXG4gICAgIXJlc3VsdCAmJiAoZWxlbWVudCAmJiBlbGVtZW50LnN0eWxlW3RyYW5zaXRpb25dICE9PSB1bmRlZmluZWQpXG4gICAgICA/IFRSQU5TSVRJT05TW3RyYW5zaXRpb25dXG4gICAgICA6IHJlc3VsdFxuICApLCBudWxsKTtcbn1cbiJdfQ==