"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _subscribeUiEvent = require("subscribe-ui-event");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

function shallowEqual(objA, objB, compare, compareContext) {
  let ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {
    return false;
  }

  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  const bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  for (let idx = 0; idx < keysA.length; idx++) {
    const key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    const valueA = objA[key];
    const valueB = objB[key];
    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || ret === void 0 && valueA !== valueB) {
      return false;
    }
  }

  return true;
}

const STATUS_ORIGINAL = 0;
const STATUS_RELEASED = 1;
const STATUS_FIXED = 2;
let TRANSFORM_PROP = 'transform';
let doc;
let docBody;
let docEl;
let canEnableTransforms = true;
let M;
let scrollDelta = 0;
let win;
let winHeight = -1;

class Sticky extends _react.Component {
  constructor(props, context) {
    super(props, context);
    this.handleResize = this.handleResize.bind(this);
    this.handleScroll = this.handleScroll.bind(this);
    this.handleScrollStart = this.handleScrollStart.bind(this);
    this.delta = 0;
    this.stickyTop = 0;
    this.stickyBottom = 0;
    this.frozen = false;
    this.skipNextScrollEvent = false;
    this.scrollTop = -1;
    this.bottomBoundaryTarget;
    this.topTarget;
    this.subscribers;
    this.state = {
      top: 0,
      bottom: 0,
      width: 0,
      height: 0,
      x: 0,
      y: 0,
      topBoundary: 0,
      bottomBoundary: Infinity,
      status: STATUS_ORIGINAL,
      pos: 0,
      activated: false
    };
  }

  componentDidMount() {
    if (!win) {
      win = window;
      doc = document;
      docEl = doc.documentElement;
      docBody = doc.body;
      winHeight = win.innerHeight || docEl.clientHeight;
      M = window.Modernizr;

      if (M && M.prefixed) {
        canEnableTransforms = M.csstransforms3d;
        TRANSFORM_PROP = M.prefixed('transform');
      }
    }

    this.scrollTop = docBody.scrollTop + docEl.scrollTop;

    if (this.props.enabled) {
      this.setState({
        activated: true
      });
      this.updateInitialDimension();
      this.update();
    }

    this.subscribers = [(0, _subscribeUiEvent.subscribe)('scrollStart', this.handleScrollStart.bind(this), {
      useRAF: true
    }), (0, _subscribeUiEvent.subscribe)('scroll', this.handleScroll.bind(this), {
      useRAF: true,
      enableScrollInfo: true
    }), (0, _subscribeUiEvent.subscribe)('resize', this.handleResize.bind(this), {
      enableResizeInfo: true
    })];
  }

  shouldComponentUpdate(nextProps, nextState) {
    return !this.props.shouldFreeze() && !(shallowEqual(this.props, nextProps) && shallowEqual(this.state, nextState));
  }

  componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (prevState.status !== this.state.status && this.props.onStateChange) {
      this.props.onStateChange({
        status: this.state.status
      });
    }

    if (prevProps.enabled !== this.props.enabled) {
      if (this.props.enabled) {
        this.setState({
          activated: true
        }, function () {
          _newArrowCheck(this, _this);

          this.updateInitialDimension();
          this.update();
        }.bind(this));
      } else {
        this.setState({
          activated: false
        }, function () {
          _newArrowCheck(this, _this);

          this.reset();
        }.bind(this));
      }
    }
  }

  componentWillUnmount() {
    const subscribers = this.subscribers || [];

    for (let i = subscribers.length - 1; i >= 0; i--) {
      this.subscribers[i].unsubscribe();
    }
  }

  getTargetHeight(target) {
    return target && target.offsetHeight || 0;
  }

  getTopPosition(top) {
    top = top || this.props.top || this.props.topTarget || 0;

    if (typeof top === 'string') {
      if (!this.topTarget) {
        this.topTarget = doc.querySelector(top);
      }

      top = this.getTargetHeight(this.topTarget);
    }

    return top;
  }

  getTargetBottom(target) {
    if (!target) {
      return -1;
    }

    const rect = target.getBoundingClientRect();
    return this.scrollTop + rect.bottom;
  }

  getBottomBoundary(bottomBoundary) {
    let boundary = bottomBoundary || this.props.bottomBoundary;

    if (typeof boundary === 'object') {
      boundary = boundary.value || boundary.target || 0;
    }

    if (typeof boundary === 'string') {
      if (!this.bottomBoundaryTarget) {
        this.bottomBoundaryTarget = doc.querySelector(boundary);
      }

      boundary = this.getTargetBottom(this.bottomBoundaryTarget);
    }

    return boundary && boundary > 0 ? boundary : Infinity;
  }

  reset() {
    this.setState({
      status: STATUS_ORIGINAL,
      pos: 0
    });
  }

  release(pos) {
    this.setState({
      status: STATUS_RELEASED,
      pos: pos - this.state.y
    });
  }

  fix(pos) {
    this.setState({
      status: STATUS_FIXED,
      pos
    });
  }

  updateInitialDimension(options) {
    options = options || {};
    const outerRect = this.outerElement.getBoundingClientRect();
    const innerRect = this.innerElement.getBoundingClientRect();
    const width = outerRect.width || outerRect.right - outerRect.left;
    const height = innerRect.height || innerRect.bottom - innerRect.top;
    const outerY = outerRect.top + this.scrollTop;
    this.setState({
      top: this.getTopPosition(options.top),
      bottom: Math.min(this.state.top + height, winHeight),
      width,
      height,
      x: outerRect.left,
      y: outerY,
      bottomBoundary: this.getBottomBoundary(options.bottomBoundary),
      topBoundary: outerY
    });
  }

  handleResize(e, ae) {
    if (this.props.shouldFreeze()) {
      return;
    }

    winHeight = ae.resize.height;
    this.updateInitialDimension();
    this.update();
  }

  handleScrollStart(e, ae) {
    this.frozen = this.props.shouldFreeze();

    if (this.frozen) {
      return;
    }

    if (this.scrollTop === ae.scroll.top) {
      this.skipNextScrollEvent = true;
    } else {
      this.scrollTop = ae.scroll.top;
      this.updateInitialDimension();
    }
  }

  handleScroll(e, ae) {
    if (this.skipNextScrollEvent) {
      this.skipNextScrollEvent = false;
      return;
    }

    scrollDelta = ae.scroll.delta;
    this.scrollTop = ae.scroll.top;
    this.update();
  }

  update() {
    const disabled = !this.props.enabled || this.state.bottomBoundary - this.state.topBoundary <= this.state.height || this.state.width === 0 && this.state.height === 0;

    if (disabled) {
      if (this.state.status !== STATUS_ORIGINAL) {
        this.reset();
      }

      return;
    }

    const delta = scrollDelta;
    const top = this.scrollTop + this.state.top;
    const bottom = this.scrollTop + this.state.bottom;

    if (top <= this.state.topBoundary) {
      this.reset();
    } else if (bottom >= this.state.bottomBoundary) {
      this.stickyBottom = this.state.bottomBoundary;
      this.stickyTop = this.stickyBottom - this.state.height;
      this.release(this.stickyTop);
    } else if (this.state.height > winHeight - this.state.top) {
      switch (this.state.status) {
        case STATUS_ORIGINAL:
          this.release(this.state.y);
          this.stickyTop = this.state.y;
          this.stickyBottom = this.stickyTop + this.state.height;

        case STATUS_RELEASED:
          this.stickyBottom = this.stickyTop + this.state.height;

          if (delta > 0 && bottom > this.stickyBottom) {
            this.fix(this.state.bottom - this.state.height);
          } else if (delta < 0 && top < this.stickyTop) {
            this.fix(this.state.top);
          }

          break;

        case STATUS_FIXED:
          var toRelease = true;
          var {
            pos
          } = this.state;
          var {
            height
          } = this.state;

          if (delta > 0 && pos === this.state.top) {
            this.stickyTop = top - delta;
            this.stickyBottom = this.stickyTop + height;
          } else if (delta < 0 && pos === this.state.bottom - height) {
            this.stickyBottom = bottom - delta;
            this.stickyTop = this.stickyBottom - height;
          } else if (pos !== this.state.bottom - height && pos !== this.state.top) {
            const deltaHeight = pos + height - this.state.bottom;
            this.stickyBottom = bottom - delta + deltaHeight;
            this.stickyTop = this.stickyBottom - height;
          } else {
            toRelease = false;
          }

          if (toRelease) {
            this.release(this.stickyTop);
          }

          break;
      }
    } else {
      this.fix(this.state.top);
    }

    this.delta = delta;
  }

  translate(style, pos) {
    const enableTransforms = canEnableTransforms && this.props.enableTransforms;

    if (enableTransforms && this.state.activated) {
      style[TRANSFORM_PROP] = `translate3d(0,${Math.round(pos)}px,0)`;
    } else {
      style.top = `${pos}px`;
    }
  }

  render() {
    var _this2 = this;

    const innerStyle = {
      position: this.state.status === STATUS_FIXED ? 'fixed' : 'relative',
      top: this.state.status === STATUS_FIXED ? '0px' : '',
      zIndex: this.props.innerZ
    };
    const outerStyle = {};
    this.translate(innerStyle, this.state.pos);

    if (this.state.status !== STATUS_ORIGINAL) {
      innerStyle.width = `${this.state.width}px`;
      outerStyle.height = `${this.state.height}px`;
    }

    const outerClasses = (0, _classnames.default)('sticky-outer-wrapper', this.props.className, {
      [this.props.activeClass]: this.state.status === STATUS_FIXED,
      [this.props.releasedClass]: this.state.status === STATUS_RELEASED
    });
    const {
      children
    } = this.props;
    return _react.default.createElement("div", {
      ref: function (outer) {
        _newArrowCheck(this, _this2);

        this.outerElement = outer;
      }.bind(this),
      className: outerClasses,
      style: outerStyle
    }, _react.default.createElement("div", {
      ref: function (inner) {
        _newArrowCheck(this, _this2);

        this.innerElement = inner;
      }.bind(this),
      className: "sticky-inner-wrapper",
      style: innerStyle
    }, typeof children === 'function' ? children({
      status: this.state.status
    }) : children));
  }

}

Sticky.displayName = 'Sticky';
Sticky.defaultProps = {
  shouldFreeze() {
    return false;
  },

  enabled: true,
  top: 0,
  bottomBoundary: 0,
  enableTransforms: true,
  activeClass: 'active',
  releasedClass: 'released',
  onStateChange: null
};
Sticky.propTypes = {
  enabled: _propTypes.default.bool,
  top: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  bottomBoundary: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),
  enableTransforms: _propTypes.default.bool,
  activeClass: _propTypes.default.string,
  releasedClass: _propTypes.default.string,
  onStateChange: _propTypes.default.func,
  shouldFreeze: _propTypes.default.func,
  innerZ: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
Sticky.STATUS_ORIGINAL = STATUS_ORIGINAL;
Sticky.STATUS_RELEASED = STATUS_RELEASED;
Sticky.STATUS_FIXED = STATUS_FIXED;
var _default = Sticky;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,